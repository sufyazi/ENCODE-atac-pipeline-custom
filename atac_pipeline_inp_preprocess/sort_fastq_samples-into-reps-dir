#!/usr/bin/env bash

# Check if the input file argument was provided
if [[ $# -lt 1 ]]; then
    echo "Usage: $0 <input_file>"
    exit 1
fi

input_file="$1"

# Create empty variables to store sample number counts for each directory ID representing different datasets
direc_check=""
curr_sample_id=""
# Initialize a counter for the number of unique sample IDs
sample_count=1

# Loop through each line of the input file
while IFS=$'\t' read -r direc sample_id ; do
    
    # Remove any carriage returns from the variables
    direc=$(echo "$direc" | tr -d '\r')
    sample_id=$(echo "$sample_id" | tr -d '\r')
    
    echo "Directory: $direc"
    echo "Sample ID: $sample_id"
    
    # Find all files in the directory that match the sample ID
    matching_files=( "$(find "$direc" -name "*${sample_id}*" -type f)" )

    # If no matching files were found, skip to the next line
    if [[ -z "$matching_files" ]]; then
        echo "No matching files found"
        continue
    fi

    # Now check if the current direc has been seen before in the loop or not; if not assign it to direc_check
    if [[ -z "$direc_check" || -z "$curr_sample_id" ]]; then
        direc_check="$direc"
        curr_sample_id="$sample_id"
    elif [[ "$direc_check" != "$direc" ]]; then
        # If the current direc is different from the previous one, reset the counter for the number of unique sample IDs to 1 instead
        sample_count=1
        direc_check="$direc"
    else
        # If the current direc is the same as the previous one, check if the sample ID is the same as the previous one first; if curr_sample_id is empty, store the first sample ID. If the sample ID is different, increment the counter for the number of unique sample IDs
        if [[ "$sample_id" != "$curr_sample_id" ]]; then
            ((sample_count++))
        fi
    fi
    
    # Create a new directory for this sample ID
    new_dir="sample_${sample_count}"
    if ! mkdir -p "$direc/$new_dir"; then
    # Check if the directory already exists
        if [ -d "$direc/$new_dir" ]; then
            echo "Directory already exists!"
        else
            echo "Error creating directory...aborting!"
            exit 1
        fi
    fi
    
    # Rsync the matching files into the new directory
    echo rsync -avzPh "${matching_files[@]}" "$direc/$new_dir" && rsync -avzPh --stats --remove-source-files "${matching_files[@]}" "$direc/$new_dir"
done < <(tail -n +2 "$input_file")
